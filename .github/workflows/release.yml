name: Release and Deploy Main

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create Release and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
          token: ${{ secrets.PAT_TOKEN }}  # Use PAT to allow pushing to protected branch

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Update README with new version
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          # Update pinned version example in README
          sed -i "s|cxone-expert-enhancements/releases/v[0-9]*\.[0-9]*\.[0-9]*/|cxone-expert-enhancements/releases/v${VERSION}/|g" README.md
          # Also update any v0.0.X references
          sed -i "s|/v[0-9]*\.[0-9]*\.[0-9]*/|/releases/v${VERSION}/|g" README.md

          # Commit if there are changes
          if [[ -n $(git status -s README.md) ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add README.md
            git commit -m "docs: Update README with v${VERSION} pinned version [skip ci]"
            git push origin main
          fi

      - name: Generate changelog
        id: changelog
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          # Get the latest tag, or use initial commit if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)

          # Generate changelog from commits
          CHANGELOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)

          # Write to file for multiline output
          echo "$CHANGELOG" > changelog.txt

          # Also set as output (escaped)
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create Git Tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.package-version.outputs.version }}" -m "Release v${{ steps.package-version.outputs.version }}"
          git push origin "v${{ steps.package-version.outputs.version }}"

      - name: Deploy to Digital Ocean Spaces
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DO_SPACES_BUCKET: ${{ secrets.DO_SPACES_BUCKET }}
          DO_SPACES_ENDPOINT: ${{ secrets.DO_SPACES_ENDPOINT }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_ACTIONS: 'true'
        run: npm run deploy:v2

      - name: Create GitHub Release
        if: steps.check-tag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ steps.package-version.outputs.version }}';
            const tag = 'v' + version;

            // Read changelog
            let changelog = '';
            try {
              changelog = fs.readFileSync('changelog.txt', 'utf8');
            } catch (e) {
              changelog = 'No changes documented';
            }

            // Build release body
            const baseUrl = 'https://benelliot-nice.sgp1.digitaloceanspaces.com/cxone-expert-enhancements';

            const releaseBody = `## CXone Expert Enhancements v${version}

            ### 📦 Installation

            #### Option 1: Latest Version (Auto-Updates)
            \`\`\`html
            <script src="${baseUrl}/latest/css-editor-embed.js"></script>
            \`\`\`

            #### Option 2: Pinned Version (No Auto-Updates)
            \`\`\`html
            <script src="${baseUrl}/releases/v${version}/css-editor-embed.js"></script>
            \`\`\`

            ### 📝 Changes

            ${changelog}

            ### 🔗 Deployment URLs

            **Pinned Version (v${version}):**
            - [css-editor-embed.js](${baseUrl}/releases/v${version}/css-editor-embed.js)
            - [css-editor.js](${baseUrl}/releases/v${version}/css-editor.js)
            - [css-editor.css](${baseUrl}/releases/v${version}/css-editor.css)

            **Latest:**
            - [css-editor-embed.js](${baseUrl}/latest/css-editor-embed.js)
            - [css-editor.js](${baseUrl}/latest/css-editor.js)
            - [css-editor.css](${baseUrl}/latest/css-editor.css)

            **Main Branch:**
            - [css-editor-embed.js](${baseUrl}/main/css-editor-embed.js)
            - [css-editor.js](${baseUrl}/main/css-editor.js)
            - [css-editor.css](${baseUrl}/main/css-editor.css)

            ---

            🤖 Generated with [Claude Code](https://claude.com/claude-code)
            `;

            // Create release
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Release ${tag}`,
              body: releaseBody,
              draft: false,
              prerelease: false
            });

      - name: Create deployment summary
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          BASE_URL="https://benelliot-nice.sgp1.digitaloceanspaces.com/cxone-expert-enhancements"

          echo "## 🎉 Release v${VERSION} Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployment Locations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This release has been deployed to **3 locations**:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Pinned Version** (\`cxone-expert-enhancements/releases/v${VERSION}/\`) - Immutable, cached forever" >> $GITHUB_STEP_SUMMARY
          echo "2. **Latest** (\`cxone-expert-enhancements/latest/\`) - Always points to newest release" >> $GITHUB_STEP_SUMMARY
          echo "3. **Main Branch** (\`cxone-expert-enhancements/main/\`) - Current main branch state" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Usage Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Option 1: Latest (Recommended - Auto-Updates)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`html" >> $GITHUB_STEP_SUMMARY
          echo "<script src=\"${BASE_URL}/latest/css-editor-embed.js\"></script>" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Option 2: Pinned Version (No Auto-Updates)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`html" >> $GITHUB_STEP_SUMMARY
          echo "<script src=\"${BASE_URL}/releases/v${VERSION}/css-editor-embed.js\"></script>" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 All Deployment URLs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pinned v${VERSION}:**" >> $GITHUB_STEP_SUMMARY
          echo "- [css-editor-embed.js](${BASE_URL}/releases/v${VERSION}/css-editor-embed.js)" >> $GITHUB_STEP_SUMMARY
          echo "- [css-editor.js](${BASE_URL}/releases/v${VERSION}/css-editor.js)" >> $GITHUB_STEP_SUMMARY
          echo "- [css-editor.css](${BASE_URL}/releases/v${VERSION}/css-editor.css)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Latest:**" >> $GITHUB_STEP_SUMMARY
          echo "- [css-editor-embed.js](${BASE_URL}/latest/css-editor-embed.js)" >> $GITHUB_STEP_SUMMARY
          echo "- [css-editor.js](${BASE_URL}/latest/css-editor.js)" >> $GITHUB_STEP_SUMMARY
          echo "- [css-editor.css](${BASE_URL}/latest/css-editor.css)" >> $GITHUB_STEP_SUMMARY
